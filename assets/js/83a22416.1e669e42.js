"use strict";(self.webpackChunkahlek=self.webpackChunkahlek||[]).push([[5630],{9360:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"hardware-gpio/control-gpio-using-c++","title":"5. Control GPIO using C++ Class in Qt Project","description":"Qt - GPIO Button","source":"@site/docs/hardware-gpio/control-gpio-using-c++.md","sourceDirName":"hardware-gpio","slug":"/hardware-gpio/control-gpio-using-c++","permalink":"/lek/docs/hardware-gpio/control-gpio-using-c++","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"practicalSidebar","previous":{"title":"4. Control GPIO Hardware from C/ C++ Program","permalink":"/lek/docs/hardware-gpio/control-gpio-hardware"},"next":{"title":"6. Hardware Testing","permalink":"/lek/docs/hardware-gpio/hardware-testing"}}');var i=r(4848),o=r(8453);const s={sidebar_position:5},c="5. Control GPIO using C++ Class in Qt Project",a={},l=[];function p(n){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"5-control-gpio-using-c-class-in-qt-project",children:"5. Control GPIO using C++ Class in Qt Project"})}),"\n",(0,i.jsx)(e.p,{children:"Qt - GPIO Button"}),"\n",(0,i.jsx)(e.p,{children:"Please reference to the Repository :"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/yourskc/q563_rzgpio/",children:"https://github.com/yourskc/q563_rzgpio/"})}),"\n",(0,i.jsx)(e.p,{children:"The most important concept in this project is how to link QML to our C++ class. All of our GPIO control functions through Linux driver are all inside the C++ class."}),"\n",(0,i.jsx)(e.p,{children:"The below are some important concepts in the above programs."}),"\n",(0,i.jsx)(e.p,{children:"If you need to register a C++ class to use from QML, you can declaring your QQmlApplicationEngine and assign it as the parent of your object."}),"\n",(0,i.jsx)(e.p,{children:"Reference :"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://doc.qt.io/qt-6/qqmlengine.html#qmlRegisterType",children:"https://doc.qt.io/qt-6/qqmlengine.html#qmlRegisterType"})}),"\n",(0,i.jsx)(e.p,{children:"Once this is registered, the type can be used in QML."}),"\n",(0,i.jsxs)(e.p,{children:["In ",(0,i.jsx)(e.code,{children:"main.cpp"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'#include <rzgpio.h>\n...\nint main(int argc, char *argv[])\n{\nQGuiApplication app(argc, argv);\nQQmlApplicationEngine engine;   \n\nRzGPIO* rzgpio = new RzGPIO(&engine);\nQQmlContext* context = engine.rootContext();\ncontext->setContextProperty("RzGPIO", rzgpio);\n\nengine.load(QUrl(QStringLiteral("qrc:/main.qml")));\n\nreturn app.exec();\n}\n'})}),"\n",(0,i.jsxs)(e.p,{children:["In ",(0,i.jsx)(e.code,{children:"main.qml"})," :"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Button {\nx:70\ny:200\n...\nonClicked : {\n        if (thismain.led2 === 0) {\n            RzGPIO.Write(2, 1);\n            thismain.led2=2;\n            }\n            else {\n                RzGPIO.Write(2, 0);\n                thismain.led2=0;\n                }\n\n            }\n"})}),"\n",(0,i.jsx)(e.p,{children:"In QTimer :"}),"\n",(0,i.jsx)(e.p,{children:'Reference to Qt "Analog Clock" under Examples/gui/analogclock/, we can add timer in Qt Control.'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"  Timer {\n        interval: 100; running: true; repeat: true;\n        onTriggered: clock.timeChanged()\n    }\n"})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>c});var t=r(6540);const i={},o=t.createContext(i);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);